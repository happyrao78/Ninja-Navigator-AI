import streamlit as st
import requests
import datetime
# from utils.save_to_document import save_document
# from exception.exceptions import TradingBotException
import sys

BASE_URL = "http://localhost:8000" 

st.set_page_config(
    page_title=" Travel Planner Agentic Application",
    page_icon="",
    layout="centered",
    initial_sidebar_state="expanded",
)

st.title(" Ninja Navigator AI- Your one stop Travel Planner Agentic Application")

if "messages" not in st.session_state:
    st.session_state.messages = []


st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# Chat input box at bottom
with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to Goa for 5 days")
    submit_button = st.form_submit_button("Send")

if submit_button and user_input.strip():
    try:

        # Show thinking spinner while backend processes
        with st.spinner("Ninja is thinking..."):
            payload = {"question": user_input}
            response = requests.post(f"{BASE_URL}/query", json=payload)

        if response.status_code == 200:
            answer = response.json().get("answer", "No answer returned.")
            markdown_content = f"""# üåç AI Travel Plan

            # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
            # **Created by:** Happy's Travel Agent

            ---

            {answer}

            ---

            *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
            """
            st.markdown(markdown_content)

            # col1,col2 =st.columns([1,1])
            # with col1:
            #     if st.button("Download Itenary"):
            #         saved_file = save_document(answer)
            #         if saved_file:
            #             st.success(f"Travel Plan saved successfully as {saved_file.name}")
            #     else:
            #         st.error("Failed to save travel plan. Please try again later.")
            
            # with col2:
            #     st.download_button(
            #         label="Download Itinerary",
            #         data=markdown_content.encode('utf-8'),
            #         file_name=f"travel_plan_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
            #         mime="text/markdown",
            #     )
        else:
            st.error(" Ninja failed to respond: " + response.text)

    except Exception as e:
        raise f"The response failed due to {e}"